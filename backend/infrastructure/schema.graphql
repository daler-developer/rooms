
input LoginInput {
    email: String!
    password: String!
}

input EditMyEmailInput {
    newEmail: String!
}

input ResetPasswordInput {
    oldPassword: String!
    newPassword: String!
    newPasswordRepeat: String!
}

input EditProfilePictureInput {
    profilePictureUrl: String
}

input CreateRoomInput {
    name: String!
    usersInvitedIds: [Int!]!
    thumbnailUrl: String
}

type Invitation {
    userId: Int!
    roomId: Int!
    inviterId: Int!
    room: Room!
    inviter: User!
    invitedUser: User!
    createdAt: String!
}

type User {
    id: Int!
    email: String!
    firstName: String!
    lastName: String!
    passwordLength: Int!
    profilePictureUrl: String
    isOnline: Boolean!
}

type RoomMessagesList {
    data: [Message!]!
    hasMore: Boolean!
}

type Room {
    id: Int!
    name: String!
    creatorId: Int!
    createdAt: String!
    participantsCount: Int!
    participants: [User!]!
    participantsTyping: [User!]!
    messages(offset: Int!): RoomMessagesList!
    scheduledMessages(offset: Int!): RoomMessagesList!
    pendingInvitationsCount: Int!
    pendingInvitations: [Invitation!]!
    participantsOnlineCount: Int!
    scheduledMessagesCount: Int!
    lastMessage: Message
    newMessagesCount: Int!
    thumbnailUrl: String
    invitedUsers: [User!]!
}

type MessageImage {
    id: Int!
    url: String!
}

type Message {
    id: Int!
    text: String!
    roomId: Int!
    senderId: Int!
    room: Room!
    sender: User!
    images: [MessageImage!]!
    viewsCount: Int!
    isViewedByMe: Boolean!
    scheduledAt: String
    sentAt: String
    sessionId: String!
}

type LoginResult {
    user: User!
    token: String!
}

type NewInvitationSub {
    invitation: Invitation!
}

type ReplyToInvitation {
    accepted: Boolean!
    invitation: Invitation!
}

type SearchUsersResult {
    data: [User!]!
    hasMore: Boolean!
}

input AcceptInvitationInput {
    roomId: Int!
}

input RejectInvitationInput {
    roomId: Int!
}

input LeaveRoomInput {
    roomId: Int!
}

input SendMessageInput {
    roomId: Int!
    text: String
    imageUrls: [String!]!
}

input ScheduleMessage {
    roomId: Int!
    text: String
    imageUrls: [String!]!
    scheduleAt: String!
}

input SearchUsersFilterInput {
    q: String!
    offset: Int!
    limit: Int!
    excludeIds: [Int!]!
}

type UserTypingStatusChangeEvent {
    isTyping: Boolean!
    user: User!
}

type MessagesDeletedEvent {
    messageIds: [Int!]!
}

type RegisterResult {
    user: User!
    token: String!
}

input RegisterInput {
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    passwordRepeat: String!
    profilePictureUrl: String
}

type StartSessionResult {
    sessionToken: String!
}

input EditFirstNameInput {
    newFirstName: String!
}

input EditLastNameInput {
    newLastName: String!
}

type Query {
    me: User!
    rooms: [Room!]!
    searchUsers(filter: SearchUsersFilterInput!): SearchUsersResult!
    room(id: Int!): Room!
    message(id: Int!): Message
    invitations: [Invitation!]!
    checkEmailAvailability(email: String!): Boolean!
    invitationsCount: Int!
}

type Mutation {
    startSession: StartSessionResult!
    register(input: RegisterInput!): RegisterResult!
    login(input: LoginInput!): LoginResult!
    editEmail(input: EditMyEmailInput!): User!
    editFirstName(input: EditFirstNameInput!): User!
    editLastName(input: EditLastNameInput!): User!
    editProfilePicture(input: EditProfilePictureInput!): User!
    resetPassword(input: ResetPasswordInput!): User!
    createRoom(input: CreateRoomInput!): Room!
    acceptInvitation(input: AcceptInvitationInput!): Invitation!
    rejectInvitation(input: RejectInvitationInput!): Invitation!
    leaveRoom(input: LeaveRoomInput!): Boolean!
    sendMessage(input: SendMessageInput!): Message!
    scheduleMessage(input: ScheduleMessage!): Message!
    notifyMeTypingStatusChange(roomId: Int!, isTyping: Boolean): Boolean!
    markMessageAsViewed(messageId: Int!): Message!
    inviteUsersToRoom(roomId: Int!, invitedUsersIds: [Int!]!): Boolean!
    excludeUserFromRoom(roomId: Int!, userId: Int!): Room!
    deleteMessages(roomId: Int!, messageIds: [Int!]!): Boolean!
    deleteScheduledMessages(messageIds: [Int!]!): Boolean!
    sendScheduledMessagesNow(messageIds: [Int!]!): Boolean!
    notifyTypingStart(roomId: Int!): Boolean!
    notifyTypingStop(roomId: Int!): Boolean!
}

type Subscription {
    newInvitation: Invitation!
    invitationRejected: Invitation!
    invitationAccepted: Invitation!
    invitationCountUpdated: Int!
    meIsExcludedFromRoom: Room!
    usersOnlineStatusChange(userIds: [Int!]!): User!
    roomParticipantLeft(roomId: Int!): User!
    roomParticipantJoined(roomId: Int!): User!
    roomParticipantsOnlineCountChange(roomId: Int!): Int!
    roomScheduledMessagesCountChange(roomId: Int!): Int!
    roomNewMessagesCountChange(roomId: Int!): Int!
    roomLastMessageChange(roomId: Int!): Message
    roomParticipantTypingStart(roomId: Int!): User!
    roomParticipantTypingStop(roomId: Int!): User!
    newMessage(skipFromCurrentSession: Boolean!): Message!
    newScheduledMessage(skipFromCurrentSession: Boolean!): [Message!]!
    newRoom: Room!
    userTypingStatusChange(roomId: Int!): UserTypingStatusChangeEvent!
    messageViewsCountChange(messageId: Int!): Int!
    roomPendingInvitationsCountChange(roomId: Int!): Int!
    messagesDeleted(roomId: Int!): MessagesDeletedEvent!
    scheduledMessagesDeleted(roomId: Int!): [Int!]!
    roomCreated(skipFromCurrentSession: Boolean!): Room!
    userProfileUpdated(userId: Int!): User!
}
